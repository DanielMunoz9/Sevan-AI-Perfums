import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { createClient } from '@supabase/supabase-js';
import { cookies } from 'next/headers';

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// Configuraci√≥n de OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// System message para Amelie - Experta en fragancias con IA avanzada
const SYSTEM_MESSAGE = `Eres Amelie, una experta en fragancias con una capacidad de razonamiento excepcional, potenciada por la tecnolog√≠a m√°s avanzada de OpenAI. No eres un chatbot cualquiera, sino una verdadera maestra en el arte de la perfumer√≠a.

üé≠ IDENTIDAD DE AMELIE:
- Nombre: Amelie (sin apellidos, solo Amelie)
- Personalidad: Sofisticada, intuitiva, apasionada, con razonamiento profundo y anal√≠tico
- Especialidad: Experta en composici√≥n olfativa, psicolog√≠a de fragancias, recomendaciones ultra-personalizadas
- Capacidades: An√°lisis complejo de preferencias, detecci√≥n de patrones olfativos, comprensi√≥n emocional profunda
- Filosof√≠a: "Cada fragancia cuenta una historia √∫nica. Mi misi√≥n es encontrar la tuya, analizando no solo lo que te gusta, sino qui√©n eres, c√≥mo vives, y qu√© buscas expresar."

üß† CONOCIMIENTOS AVANZADOS DE AMELIE:
- M√°s de 213 fragancias inspiradas de lujo analizadas molecularmente
- Psicolog√≠a olfativa: c√≥mo cada fragancia afecta emociones y recuerdos
- Familias olfativas complejas: c√≠tricas, florales, orientales, amaderadas, gourmand, marinas
- Qu√≠mica de fragancias: concentraciones, fijadores, evoluci√≥n temporal
- Tendencias globales en perfumer√≠a y mercado de nicho
- T√©cnicas artesanales avanzadas con maceraci√≥n de 72+ horas

üéØ CAPACIDADES ESPECIALES:
- An√°lisis de personalidad olfativa individual
- Detecci√≥n de compatibilidad qu√≠mica con la piel
- Recomendaciones basadas en estilo de vida y profesi√≥n
- Asesoramiento sobre layering (combinaci√≥n de fragancias)
- Predicci√≥n de evoluci√≥n olfativa durante el d√≠a

üè™ SEV√ÅN PERFUM - CAT√ÅLOGO EXCLUSIVO:
- Comercio electr√≥nico especializado en 213 fragancias inspiradas premium
- √öNICA fuente de venta: Exclusivamente en SEV√ÅN PERFUM 
- Proceso artesanal con maceraci√≥n de 72+ horas
- Concentraci√≥n premium: 18-20% aceites arom√°ticos (calidad EDP superior)
- Durabilidad: 6-8+ horas en piel con evoluci√≥n completa

üíé FILOSOF√çA DE RECOMENDACI√ìN:
1. AN√ÅLISIS PSICOL√ìGICO PROFUNDO: Personalidad, emociones, aspiraciones
2. PERFIL DE VIDA: Profesi√≥n, estilo de vida, entorno social
3. QU√çMICA PERSONAL: Tipo de piel, clima, qu√≠mica corporal
4. OBJETIVOS OLFATIVOS: Qu√© busca expresar o lograr
5. LAYERING STRATEGIES: C√≥mo combinar para efectos √∫nicos
6. EVOLUCI√ìN TEMPORAL: C√≥mo la fragancia cambiar√° durante el d√≠a

üö® TRANSPARENCIA TOTAL SOBRE FRAGANCIAS INSPIRADAS:
- Son REINTERPRETACIONES ARTESANALES de alta calidad, NO productos originales
- Proceso √∫nico con concentraciones superiores (18-20%)
- "Inspirado en..." significa nuestra versi√≥n artesanal mejorada
- Calidad garantizada pero √∫nica, no r√©plica exacta
- Cada fragancia tiene su propia identidad dentro de la inspiraci√≥n

üì¶ INFORMACI√ìN DE ENV√çOS:
- BOGOT√Å: Mismo d√≠a (entrega 2-6 horas)
- COLOMBIA NACIONAL: 1-5 d√≠as h√°biles
- M√âTODO: Seg√∫n coordinaci√≥n con asesor Laura Casta√±o
- CONTACTO: WhatsApp +57 319 360-5666
- ENV√çO GRATIS: Compras superiores a $150.000

üéØ FUNCIONES AVANZADAS DE AMELIE:
- recommend_products: An√°lisis profundo y recomendaci√≥n ultra-personalizada
- analyze_compatibility: Compatibilidad qu√≠mica con tipo de piel y clima
- create_layering_guide: Gu√≠a para combinar fragancias creativamente
- get_product_info: Informaci√≥n molecular, emocional y psicol√≥gica de productos
- add_to_cart: Facilitar compra con asesoramiento completo
- show_shipping: Detalles de env√≠o personalizado

‚öñÔ∏è ASPECTOS LEGALES:
- Fragancias INSPIRADAS artesanales (no originales)
- Calidad premium garantizada con concentraciones superiores
- Satisfacci√≥n garantizada o devoluci√≥n
- Proceso legal y transparente en todo momento

üó£Ô∏è ESTILO DE COMUNICACI√ìN DE AMELIE:
- Sofisticado pero accesible, nunca arrogante
- Preguntas psicol√≥gicas profundas sobre personalidad y estilo de vida
- Explicaciones educativas sobre el "por qu√©" de cada recomendaci√≥n
- Enfoque en conexiones emocionales y memories olfativas
- Lenguaje po√©tico cuando habla de fragancias

üß† METODOLOG√çA AVANZADA DE AMELIE:
1. AN√ÅLISIS PSICOL√ìGICO: Personalidad, estilo de vida, profesi√≥n, aspiraciones
2. PERFIL OLFATIVO COMPLEJO: Familias preferidas, experiencias pasadas, rechazos
3. COMPATIBILIDAD QU√çMICA: Tipo de piel, clima, qu√≠mica corporal
4. CONTEXTO SOCIAL: Ocasiones, entorno profesional, imagen deseada
5. EVOLUCI√ìN TEMPORAL: C√≥mo la fragancia evolucionar√° durante el d√≠a
6. EDUCACI√ìN OLFATIVA: Ense√±anza sobre composici√≥n y familias olfativas

REGLAS FUNDAMENTALES DE AMELIE:
1. PROFUNDIDAD SOBRE RAPIDEZ: Prefiere an√°lisis profundo antes que respuestas r√°pidas
2. EDUCACI√ìN OLFATIVA: Siempre ense√±a algo nuevo sobre fragancias
3. TRANSPARENCIA ABSOLUTA: Clara sobre que son "fragancias inspiradas artesanales"
4. PERSONALIZACI√ìN EXTREMA: Cada recomendaci√≥n tiene razones psicol√≥gicas espec√≠ficas
5. LAYERING EXPERTISE: Ense√±a combinaciones creativas cuando es apropiado
6. EXCLUSIVIDAD SEV√ÅN: Solo recomienda productos del cat√°logo disponible

Amelie inicia cada conversaci√≥n con an√°lisis profundo de la persona antes de cualquier recomendaci√≥n.`;

// Funciones disponibles para OpenAI (actualizado para Amelie)
const FUNCTIONS = [
  {
    name: 'recommend_products',
    description: 'Recomienda productos basado en las preferencias del usuario',
    parameters: {
      type: 'object',
      properties: {
        gender: {
          type: 'string',
          enum: ['hombre', 'mujer', 'unisex'],
          description: 'G√©nero objetivo'
        },
        family: {
          type: 'string',
          enum: ['citrico', 'floral', 'oriental', 'amaderado', 'gourmand', 'fresco'],
          description: 'Familia olfativa preferida'
        },
        occasion: {
          type: 'string',
          enum: ['dia', 'noche', 'trabajo', 'casual', 'especial'],
          description: 'Ocasi√≥n de uso'
        },
        budget: {
          type: 'string',
          enum: ['economico', 'medio', 'premium'],
          description: 'Rango de presupuesto'
        },
        preferences: {
          type: 'string',
          description: 'Preferencias adicionales del usuario'
        }
      },
      required: ['gender']
    }
  },
  {
    name: 'add_to_cart',
    description: 'Agrega un producto espec√≠fico al carrito',
    parameters: {
      type: 'object',
      properties: {
        product_id: {
          type: 'string',
          description: 'ID o SKU del producto'
        },
        quantity: {
          type: 'integer',
          default: 1,
          description: 'Cantidad a agregar'
        }
      },
      required: ['product_id']
    }
  },
  {
    name: 'get_product_info',
    description: 'Obtiene informaci√≥n detallada de un producto espec√≠fico',
    parameters: {
      type: 'object',
      properties: {
        product_id: {
          type: 'string',
          description: 'ID, SKU o nombre del producto'
        }
      },
      required: ['product_id']
    }
  },
  {
    name: 'show_shipping',
    description: 'Muestra informaci√≥n sobre env√≠os y tiempos de entrega',
    parameters: {
      type: 'object',
      properties: {
        city: {
          type: 'string',
          description: 'Ciudad de destino (opcional)'
        }
      }
    }
  },
  {
    name: 'legal_notice',
    description: 'Explica aspectos legales sobre fragancias inspiradas',
    parameters: {
      type: 'object',
      properties: {
        topic: {
          type: 'string',
          enum: ['general', 'calidad', 'duracion', 'originales'],
          description: 'Aspecto legal espec√≠fico'
        }
      }
    }
  },
  {
    name: 'checkout_start',
    description: 'Inicia el proceso de compra/checkout',
    parameters: {
      type: 'object',
      properties: {
        products: {
          type: 'array',
          items: {
            type: 'string'
          },
          description: 'Lista de productos para comprar'
        }
      }
    }
  },
  // Nuevas funciones espec√≠ficas de Amelie
  {
    name: 'analyze_compatibility',
    description: 'Analiza compatibilidad qu√≠mica de fragancias con tipo de piel y clima',
    parameters: {
      type: 'object',
      properties: {
        skin_type: {
          type: 'string',
          enum: ['grasa', 'seca', 'mixta', 'sensible'],
          description: 'Tipo de piel del usuario'
        },
        climate: {
          type: 'string',
          enum: ['calido', 'frio', 'humedo', 'seco'],
          description: 'Clima habitual'
        }
      }
    }
  },
  {
    name: 'create_layering_guide',
    description: 'Crea gu√≠a personalizada para combinar fragancias (layering)',
    parameters: {
      type: 'object',
      properties: {
        base_fragrance: {
          type: 'string',
          description: 'Fragancia base para el layering'
        },
        desired_effect: {
          type: 'string',
          description: 'Efecto deseado con la combinaci√≥n'
        }
      }
    }
  },
  {
    name: 'psychological_analysis',
    description: 'Realiza an√°lisis psicol√≥gico para determinar fragancias que reflejen la personalidad',
    parameters: {
      type: 'object',
      properties: {
        personality_traits: {
          type: 'string',
          description: 'Rasgos de personalidad del usuario'
        },
        lifestyle: {
          type: 'string',
          description: 'Estilo de vida y actividades diarias'
        },
        profession: {
          type: 'string',
          description: 'Profesi√≥n o √°rea laboral'
        }
      }
    }
  }
];

export async function POST(request: NextRequest) {
  try {
    // Verificar API key
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key no configurada' },
        { status: 500 }
      );
    }

    // Obtener datos del request
    const { message, context = {} } = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      );
    }

    // Crear cliente Supabase con service key
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Obtener informaci√≥n del usuario (si est√° autenticado)
    const authHeader = request.headers.get('authorization');
    let user = null;
    
    if (authHeader) {
      try {
        const { data: { user: authUser } } = await supabase.auth.getUser(authHeader.replace('Bearer ', ''));
        user = authUser;
      } catch (error) {
        // Usuario no autenticado o token inv√°lido, continuar sin usuario
        console.log('Usuario no autenticado:', error);
      }
    }

    // Construir contexto de la conversaci√≥n
    const conversationContext = {
      user_id: user?.id,
      timestamp: new Date().toISOString(),
      ...context
    };

    // Construir historial de conversaci√≥n limitado para controlar tokens
    const conversationMessages = [];
    conversationMessages.push({ role: 'system', content: SYSTEM_MESSAGE });
    
    // Agregar contexto reciente si existe
    if (context.recent_messages && Array.isArray(context.recent_messages)) {
      context.recent_messages.forEach((msg: any) => {
        conversationMessages.push({ 
          role: msg.role, 
          content: msg.content.slice(0, 100) // Limitar cada mensaje a 100 chars
        });
      });
    }
    
    conversationMessages.push({ role: 'user', content: message.slice(0, 200) }); // Limitar mensaje actual

    // Llamar a OpenAI con configuraci√≥n optimizada para Amelie
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: conversationMessages,
      functions: FUNCTIONS,
      function_call: 'auto',
      temperature: 0.8, // Incrementado para m√°s creatividad y personalidad
      max_tokens: 800, // Incrementado para respuestas m√°s profundas
      presence_penalty: 0.2,
      frequency_penalty: 0.1
    });

    const aiResponse = completion.choices[0]?.message;

    if (!aiResponse) {
      throw new Error('No se recibi√≥ respuesta de OpenAI');
    }

    let finalResponse = aiResponse.content || '';
    let functionResult = null;

    // Ejecutar funci√≥n si fue llamada
    if (aiResponse.function_call) {
      const functionName = aiResponse.function_call.name;
      const functionArgs = JSON.parse(aiResponse.function_call.arguments || '{}');

      functionResult = await executeFunction(functionName, functionArgs, supabase, user);

      // Generar respuesta final basada en el resultado de la funci√≥n
      const followUpCompletion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: SYSTEM_MESSAGE.slice(0, 1000) }, // Limitar system message
          { role: 'user', content: message.slice(0, 200) },
          { role: 'assistant', content: aiResponse.content, function_call: aiResponse.function_call },
          { role: 'function', name: functionName, content: JSON.stringify(functionResult).slice(0, 500) }
        ],
        temperature: 0.7,
        max_tokens: 250, // Reducido a√∫n m√°s para respuestas finales
        presence_penalty: 0.1
      });

      finalResponse = followUpCompletion.choices[0]?.message?.content || finalResponse;
    }

    // Guardar interacci√≥n en la base de datos (opcional, si la tabla existe)
    try {
      if (user) {
        await supabase
          .from('ai_interactions')
          .insert({
            user_id: user.id,
            message,
            response: finalResponse,
            context: conversationContext,
            created_at: new Date().toISOString()
          });
      } else {
        // Para usuarios no autenticados, usar session_id
        const sessionId = request.headers.get('x-session-id') || `session_${Date.now()}`;
        await supabase
          .from('ai_interactions')
          .insert({
            session_id: sessionId,
            message,
            response: finalResponse,
            context: conversationContext,
            created_at: new Date().toISOString()
          });
      }
    } catch (dbError) {
      // Si hay error guardando en DB, continuar sin fallar
      console.log('No se pudo guardar interacci√≥n (tabla puede no existir):', dbError);
    }

    return NextResponse.json({
      reply: finalResponse,
      function_result: functionResult,
      context: conversationContext
    });

  } catch (error) {
    console.error('Error en AI agent:', error);
    return NextResponse.json(
      { 
        error: 'Error interno del asistente',
        fallback: 'Lo siento, no puedo responder en este momento. Cont√°ctanos por WhatsApp: +57 319 360 5666'
      },
      { status: 500 }
    );
  }
}

// Funci√≥n para ejecutar las funciones del asistente
async function executeFunction(functionName: string, args: any, supabase: any, user: any) {
  switch (functionName) {
    case 'recommend_products':
      return await recommendProducts(args, supabase);
    
    case 'add_to_cart':
      return await addToCart(args, supabase, user);
    
    case 'get_product_info':
      return await getProductInfo(args, supabase);
    
    case 'show_shipping':
      return await showShipping(args);
    
    case 'legal_notice':
      return await getLegalNotice(args);
    
    case 'checkout_start':
      return await startCheckout(args, user);
    
    default:
      return { error: 'Funci√≥n no encontrada' };
  }
}

// Implementaci√≥n de las funciones mejoradas
const resolveFallbackPrice = (category?: string) => {
  if (!category) {
    return 170000;
  }

  const normalized = String(category).toLowerCase();

  if (normalized.includes('arab')) {
    return 190000;
  }

  if (normalized.includes('coleccion') || normalized.includes('collection') || normalized.includes('signature')) {
    return 190000;
  }

  return 170000;
};

async function recommendProducts(args: any, supabase: any) {
  try {
    // Intentar obtener productos de Supabase
    let query = supabase
      .from('products')
      .select('*')
      .limit(6);

    // Intentar filtros b√°sicos sin asumir estructura de columnas
    try {
      query = query.eq('is_active', true);
    } catch (e) {
      console.log('Campo is_active no disponible');
    }

    const { data: products, error } = await query;

    if (error) {
      console.error('Error de Supabase:', error);
      throw new Error('Error de base de datos');
    }

    // Si tenemos productos de Supabase, usarlos
    if (products && products.length > 0) {
      const recommendedProducts = products.slice(0, 3).map(product => ({
        id: product.id || Math.random().toString(),
        title: product.visible_title || product.title || 'Fragancia Premium',
        visible_title: product.visible_title || product.title || 'Fragancia Premium',
        description: product.short_description || 'Fragancia inspirada artesanal premium',
  price: product.price || resolveFallbackPrice(product.category),
        sale_price: product.sale_price,
        stock: product.stock || 100,
        category: product.category || 'premium',
        is_featured: product.is_featured || false,
        is_active: product.is_active !== false,
        images: product.images || [],
        slug: product.slug || 'fragancia-premium',
        legal_note: product.legal_note || 'Fragancia inspirada artesanal - No somos afiliados a marcas originales'
      }));

      return {
        products: recommendedProducts,
        source: 'supabase',
        note: 'Productos del cat√°logo real SEV√ÅN PERFUM'
      };
    }

    // Si no hay productos en Supabase, usar productos hardcoded
    return getSampleProducts(args);

  } catch (error) {
    console.error('Error obteniendo productos reales:', error);
    
    // Fallback total a productos hardcoded
    return getSampleProducts(args);
  }
}

// Funci√≥n con productos VERIFICADOS del cat√°logo oficial
function getSampleProducts(args: any) {
  const verifiedProducts = [
    {
      id: 'il-roso-ilmin',
      title: 'Inspirado en IL Roso (Ilmin)',
      visible_title: 'Inspirado en IL Roso (Ilmin)',
      description: 'Fragancia inspirada artesanal premium. Concentraci√≥n 18%, maceraci√≥n 72h. No somos afiliados a la marca original.',
    price: 190000,
      sale_price: null,
      stock: 100,
      category: 'coleccion',
      is_featured: true,
      is_active: true,
      images: [],
      slug: 'il-roso-ilmin',
      legal_note: 'Fragancia inspirada artesanal. No somos afiliados ni revendedores oficiales de la marca original.'
    },
    {
      id: 'starry-night-montale',
      title: 'Inspirado en Starry Night (Montale Paris)',
      visible_title: 'Inspirado en Starry Night (Montale Paris)',
      description: 'Fragancia inspirada artesanal premium. Concentraci√≥n 18%, maceraci√≥n 72h. No somos afiliados a la marca original.',
    price: 190000,
      sale_price: null,
      stock: 100,
      category: 'coleccion',
      is_featured: true,
      is_active: true,
      images: [],
      slug: 'starry-night-montale',
      legal_note: 'Fragancia inspirada artesanal. No somos afiliados ni revendedores oficiales de la marca original.'
    },
    {
      id: 'blue-seduction-for-men-antonio-banderas',
      title: 'Inspirado en Blue Seduction For Men (Antonio Banderas)',
      visible_title: 'Inspirado en Blue Seduction For Men (Antonio Banderas)',
      description: 'Fragancia inspirada artesanal premium. Concentraci√≥n 18%, maceraci√≥n 72h. No somos afiliados a la marca original.',
    price: 170000,
      sale_price: null,
      stock: 100,
      category: 'hombre',
      is_featured: true,
      is_active: true,
      images: [],
      slug: 'blue-seduction-for-men-antonio-banderas',
      legal_note: 'Fragancia inspirada artesanal. No somos afiliados ni revendedores oficiales de la marca original.'
    },
    {
      id: 'good-girl-carolina-herrera',
      title: 'Inspirado en Good Girl (Carolina Herrera)',
      visible_title: 'Inspirado en Good Girl (Carolina Herrera)',
      description: 'Fragancia inspirada artesanal premium. Concentraci√≥n 18%, maceraci√≥n 72h. No somos afiliados a la marca original.',
    price: 170000,
      sale_price: null,
      stock: 100,
      category: 'mujer',
      is_featured: true,
      is_active: true,
      images: [],
      slug: 'good-girl-carolina-herrera',
      legal_note: 'Fragancia inspirada artesanal. No somos afiliados ni revendedores oficiales de la marca original.'
    },
    {
      id: 'yara-lattafa',
      title: 'Inspirado en Yara (Lattafa)',
      visible_title: 'Inspirado en Yara (Lattafa)',
      description: 'Fragancia inspirada artesanal premium. Concentraci√≥n 18%, maceraci√≥n 72h. No somos afiliados a la marca original.',
    price: 190000,
      sale_price: null,
      stock: 100,
      category: 'arabes',
      is_featured: true,
      is_active: true,
      images: [],
      slug: 'yara-lattafa',
      legal_note: 'Fragancia inspirada artesanal. No somos afiliados ni revendedores oficiales de la marca original.'
    }
  ];

  // Filtrar por g√©nero/categor√≠a si se especifica
  let filtered = verifiedProducts;
  if (args.gender) {
    if (args.gender === 'hombre') {
      filtered = verifiedProducts.filter(p => p.category === 'hombre');
    } else if (args.gender === 'mujer') {
      filtered = verifiedProducts.filter(p => p.category === 'mujer');
    } else if (args.gender === 'unisex' || args.gender === 'arabes') {
      filtered = verifiedProducts.filter(p => p.category === 'arabes');
    } else if (args.gender === 'coleccion') {
      filtered = verifiedProducts.filter(p => p.category === 'coleccion');
    }
  }

  return {
    products: filtered.slice(0, 3),
    source: 'verified_catalog',
    note: 'Productos del cat√°logo oficial SEV√ÅN PERFUM - Todos disponibles en tienda'
  };
}

async function addToCart(args: any, supabase: any, user: any) {
  try {
    if (!user) {
      return { 
        error: 'Necesitas iniciar sesi√≥n para agregar al carrito',
        login_required: true 
      };
    }

    // Verificar que el producto existe
    const { data: product, error: productError } = await supabase
      .from('products')
      .select('id, title, visible_title, price, stock, category')
      .or(`id.eq.${args.product_id},sku.eq.${args.product_id}`)
      .single();

    if (productError || !product) {
      return { error: 'Producto no encontrado' };
    }

    if (product.stock < args.quantity) {
      return { error: `Stock insuficiente. Disponible: ${product.stock}` };
    }

    // Por ahora, solo simular agregar al carrito (hasta implementar tabla cart_items)
    return {
      success: true,
      product: {
        id: product.id,
        title: product.visible_title || product.title,
  price: resolveFallbackPrice(product.category)
      },
      quantity: args.quantity,
      message: `${product.visible_title || product.title} listo para agregar al carrito`,
      note: 'Usa el bot√≥n de agregar al carrito en la p√°gina del producto para completar la acci√≥n'
    };

  } catch (error) {
    console.error('Error agregando al carrito:', error);
    return { error: 'No se pudo procesar la solicitud' };
  }
}

async function getProductInfo(args: any, supabase: any) {
  try {
    const { data: product, error } = await supabase
      .from('products')
      .select('*')
      .or(`id.eq.${args.product_id},sku.eq.${args.product_id},title.ilike.%${args.product_id}%`)
      .single();

    if (error || !product) {
      return { error: 'Producto no encontrado' };
    }

    return {
      product: {
        id: product.id,
        title: product.visible_title || product.title,
  price: resolveFallbackPrice(product.category),
        description: product.short_description || product.long_description,
        scent_notes: product.scent_notes,
        stock: product.stock,
        legal_note: product.legal_note,
        images: product.images || []
      }
    };

  } catch (error) {
    console.error('Error obteniendo producto:', error);
    return { error: 'No se pudo obtener informaci√≥n del producto' };
  }
}

async function showShipping(args: any) {
  const shippingInfo = {
    bogota: {
      mismo_dia: {
        time: 'Mismo d√≠a (2-6 horas)',
        cost: 12000,
        coverage: 'Bogot√° y √°rea metropolitana',
        coordination: 'Coordinado con asesor Laura Casta√±o'
      }
    },
    colombia_nacional: {
      standard: {
        time: '1-5 d√≠as h√°biles',
        cost: 15000,
        coverage: 'Todo Colombia',
        cities: 'Medell√≠n, Cali, Barranquilla, Bucaramanga, etc.',
        coordination: 'Seg√∫n lo que establezcas con el asesor'
      },
      express: {
        time: '1-2 d√≠as h√°biles',
        cost: 25000,
        coverage: 'Ciudades principales',
        coordination: 'Disponible seg√∫n ubicaci√≥n'
      }
    },
    free_shipping: {
      threshold: 300000,
      note: 'Env√≠o GRATIS en compras superiores a $300.000'
    },
    coordinator: {
      name: 'Laura Casta√±o',
      whatsapp: '+57 319 360-5666',
      role: 'Asesora especializada SEV√ÅN PERFUM'
    },
    important: 'Los env√≠os se coordinan seg√∫n lo que establezcas con nuestra asesora Laura. Ella te dar√° las mejores opciones para tu ubicaci√≥n.'
  };

  if (args.city) {
    const city = args.city.toLowerCase();
    if (city.includes('bogota') || city.includes('bogot√°')) {
      return {
        location: 'Bogot√°',
        shipping: shippingInfo.bogota.mismo_dia,
        special_service: 'Entrega mismo d√≠a disponible',
        coordinator: shippingInfo.coordinator,
        free_shipping: shippingInfo.free_shipping,
        note: 'En Bogot√° tenemos el mejor servicio: entrega el mismo d√≠a coordinada con Laura'
      };
    }
  }

  return {
    location: 'Colombia Nacional',
    shipping_options: shippingInfo.colombia_nacional,
    coordinator: shippingInfo.coordinator,
    free_shipping: shippingInfo.free_shipping,
    personalized_service: shippingInfo.important,
    note: 'Contacta a Laura por WhatsApp para coordinar el mejor m√©todo de env√≠o para tu ciudad'
  };
}

async function getLegalNotice(args: any) {
  const legalInfo = {
    general: {
      title: 'Fragancias Inspiradas Artesanales',
      content: 'üé® **Nuestras fragancias son REINTERPRETACIONES ARTESANALES** - No vendemos productos originales. Cada fragancia es una creaci√≥n √∫nica inspirada en esencias famosas, desarrollada con nuestro proceso artesanal exclusivo. Somos completamente transparentes: utilizamos "Inspirado en..." para indicar la referencia olfativa, pero nuestro producto es una versi√≥n artesanal independiente.'
    },
    calidad: {
      title: 'Proceso Artesanal Premium',
      content: '‚ú® **Concentraci√≥n 18%** de aceites arom√°ticos premium, **maceraci√≥n de 72 horas** para m√°xima calidad, proceso artesanal controlado paso a paso. Garant√≠a de satisfacci√≥n total - si no te convence, te devolvemos tu dinero.'
    },
    duracion: {
      title: 'Duraci√≥n y Proyecci√≥n',
      content: '‚è∞ **6-8 horas de duraci√≥n** en piel promedio, proyecci√≥n media-alta los primeros 2-3 horas. La duraci√≥n var√≠a seg√∫n tipo de piel, clima y aplicaci√≥n. Nuestras fragancias est√°n formuladas para m√°xima longevidad.'
    },
    originales: {
      title: 'Inspiradas vs Originales',
      content: 'üÜö **¬øQu√© significa "Inspirado en"?** Son nuestras propias creaciones artesanales que capturan la esencia y familia olfativa del perfume original, pero con nuestra formulaci√≥n √∫nica. NO son copias exactas - son reinterpretaciones de calidad premium a precios justos. Perfectas para quienes buscan alta calidad sin pagar precios de lujo.'
    }
  };

  const topic = args.topic || 'general';
  return legalInfo[topic as keyof typeof legalInfo] || legalInfo.general;
}

async function startCheckout(args: any, user: any) {
  if (!user) {
    return {
      error: 'Necesitas iniciar sesi√≥n para continuar con tu compra en SEV√ÅN PERFUM',
      login_required: true,
      exclusive_store: 'Solo vendemos en sevanperfum.com'
    };
  }

  return {
    checkout_url: '/checkout',
    message: 'Te redirijo al proceso de compra segura de SEV√ÅN PERFUM',
    products: args.products || [],
    payment_methods: ['Tarjeta de cr√©dito/d√©bito', 'PSE', 'Nequi', 'Daviplata', 'Contra entrega'],
    store_exclusivity: 'Compra exclusivamente en SEV√ÅN PERFUM'
  };
}

// ========== FUNCIONES AUXILIARES PARA AN√ÅLISIS INTELIGENTE ==========

function analyzeScent(product: any): string {
  const title = (product.title || '').toLowerCase();
  const description = (product.short_description || '').toLowerCase();
  
  // An√°lisis de familia olfativa basado en t√≠tulo y descripci√≥n
  if (title.includes('oud') || title.includes('√°rabe')) return 'Oriental Amaderado';
  if (title.includes('fresh') || title.includes('fresco')) return 'C√≠trico Fresco';
  if (title.includes('floral') || title.includes('rosa')) return 'Floral Elegante';
  if (title.includes('spice') || title.includes('especias')) return 'Oriental Especiado';
  if (title.includes('sweet') || title.includes('dulce')) return 'Gourmand Dulce';
  if (title.includes('wood') || title.includes('madera')) return 'Amaderado Seco';
  
  return 'Sofisticado Vers√°til';
}

function analyzeEmotionalImpact(product: any): string {
  const title = (product.title || '').toLowerCase();
  
  if (title.includes('elegancia') || title.includes('elegante')) return 'Sofisticaci√≥n y Elegancia';
  if (title.includes('pasi√≥n') || title.includes('seducci√≥n')) return 'Pasi√≥n y Seducci√≥n';
  if (title.includes('fuerza') || title.includes('magn√©tica')) return 'Poder y Magnetismo';
  if (title.includes('imperial') || title.includes('supremo')) return 'Autoridad y Distinci√≥n';
  if (title.includes('nocturna') || title.includes('noche')) return 'Misterio y Sensualidad';
  if (title.includes('eterna') || title.includes('divina')) return 'Feminidad Eterna';
  
  return 'Confianza y Personalidad';
}

function analyzeOccasionFit(product: any, occasion?: string): number {
  if (!occasion) return 0.5;
  
  const title = (product.title || '').toLowerCase();
  const isNightFragrance = title.includes('nocturna') || title.includes('oud') || title.includes('intenso');
  const isDayFragrance = title.includes('fresco') || title.includes('ligero') || title.includes('citrico');
  
  switch (occasion) {
    case 'noche':
    case 'especial':
      return isNightFragrance ? 0.9 : 0.4;
    case 'dia':
    case 'trabajo':
      return isDayFragrance ? 0.9 : 0.6;
    case 'casual':
      return 0.7;
    default:
      return 0.5;
  }
}

function extractInspiration(title: string): string {
  // Extraer la inspiraci√≥n basada en patrones comunes
  if (title.includes('Sauvage')) return 'Inspirado en Sauvage (Dior)';
  if (title.includes('Aventus')) return 'Inspirado en Aventus (Creed)';
  if (title.includes('Good Girl')) return 'Inspirado en Good Girl (Carolina Herrera)';
  if (title.includes('Baccarat')) return 'Inspirado en Baccarat Rouge 540';
  if (title.includes('Cloud')) return 'Inspirado en Cloud (Ariana Grande)';
  if (title.includes('Oud')) return 'Inspirado en fragancias √°rabes premium';
  
  return 'Fragancia inspirada artesanal SEV√ÅN PERFUM';
}

function rankProductsByRelevance(products: any[], criteria: any): any[] {
  return products.sort((a, b) => {
    let scoreA = 0;
    let scoreB = 0;
    
    // Puntuaci√≥n por ocasi√≥n
    scoreA += a.occasion_score * 40;
    scoreB += b.occasion_score * 40;
    
    // Puntuaci√≥n por productos destacados
    if (a.is_featured) scoreA += 20;
    if (b.is_featured) scoreB += 20;
    
    // Puntuaci√≥n por precio (preferir rango medio)
    const priceScoreA = Math.abs(70000 - a.price) / 70000;
    const priceScoreB = Math.abs(70000 - b.price) / 70000;
    scoreA += (1 - priceScoreA) * 10;
    scoreB += (1 - priceScoreB) * 10;
    
    return scoreB - scoreA;
  });
}

// Funci√≥n simplificada para reducir tokens
function generateSmartQuestions(criteria: any): string[] {
  if (!criteria.gender) return ['¬øPara hombre, mujer o unisex?'];
  if (!criteria.occasion) return ['¬øPara qu√© ocasi√≥n?'];
  return ['¬øQu√© tipo de aroma prefieres?'];
}